; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ThuyDienApp"
#define MyAppExeName = "ModbusSesan.exe"
#define BuildPath=".."         
#define AppVersion="3.0.0.1"
#define BitexcoServiceName="BackgroundService_Bitexco" 
#define TNMTServiceName="BackgroundService_TNMT" 
#define WebServiceName="BackgroundService_WebTayNguyen"  

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{2E36638A-DF77-4A7E-B320-F82F13CD5267}
AppName={#MyAppName}
AppVersion={#AppVersion}
AppVerName={#MyAppName} {#AppVersion}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=true
OutputBaseFilename=ThuyDienSetup-{#AppVersion}
Compression=lzma
SolidCompression=true
InternalCompressLevel=ultra
PrivilegesRequired=admin
AppCopyright=Robert Bosch Engineering & Business Solutions
ShowLanguageDialog=no
DefaultGroupName=ThuyDien
ChangesAssociations = yes
VersionInfoVersion={#AppVersion}
DisableDirPage=no
WizardSizePercent=110


[UninstallRun]
; Filename: {sys}\sc.exe; Parameters: "stop {#BitexcoServiceName}" ; Flags: runhidden
; Filename: {sys}\sc.exe; Parameters: "delete {#BitexcoServiceName}" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "stop {#TNMTServiceName}" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "delete {#TNMTServiceName}" ; Flags: runhidden
; Filename: {sys}\sc.exe; Parameters: "stop {#WebServiceName}" ; Flags: runhidden
; Filename: {sys}\sc.exe; Parameters: "delete {#WebServiceName}" ; Flags: runhidden

[Tasks]
Name: desktopicon; Description:{cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}

[Icons]
Name: {commondesktop}\{#MyAppExeName}; Filename: {app}\{#MyAppExeName}; IconFilename:"{app}\thuydien.ico";Tasks: desktopicon

[Files]
Source: {#BuildPath}\Services\*.*; DestDir: {app}\Services; Flags: ignoreversion
Source: {#BuildPath}\App\*; DestDir: {app}; Flags: ignoreversion recursesubdirs
Source: {#BuildPath}\Scripts\*.*; DestDir: {app}\Scripts; Flags: ignoreversion

[Code]
var
DatabaseConfigurationPage : TInputQueryWizardPage;


function FileReplaceString(FileName, SearchString, ReplaceString: string):boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  MyFile := TStringList.Create;

  try
    result := true;

    try
      MyFile.LoadFromFile(FileName);
      MyText := MyFile.Text;

      { Only save if text has been changed. }
      if StringChangeEx(MyText, SearchString, ReplaceString, True) > 0 then
      begin;
        MyFile.Text := MyText;
        MyFile.SaveToFile(FileName);
      end;
    except
      result := false;
    end;
  finally
    MyFile.Free;
  end;
end;

function GetSQLServerName():String;
begin
   Result := DatabaseConfigurationPage.Values[0];
end;

function GetSQLUserName():String;
begin
   Result := DatabaseConfigurationPage.Values[1];
end;

function GetSQLPassword():String;
begin
   Result := DatabaseConfigurationPage.Values[2];
end;

procedure InitializeWizard();
var
  VersionLabel: TNewStaticText;
  test : boolean;
begin
  VersionLabel := TNewStaticText.Create(WizardForm);
  VersionLabel.Caption := Format('Version: %s', ['{#AppVersion}']);
  VersionLabel.Parent := WizardForm;
  VersionLabel.Left := ScaleX(16);
  VersionLabel.Top :=
    WizardForm.BackButton.Top +
    (WizardForm.BackButton.Height div 2) -
    (VersionLabel.Height div 2);   
  VersionLabel.Top := VersionLabel.Top * 110 div 100;   

  DatabaseConfigurationPage := CreateInputQueryPage(wpWelcome,'Cài đặt database','Cấu hình database cho việc thiết lập và lưu trữ dữ liệu.', '');
  DatabaseConfigurationPage.Add('SQL Server Name',False);
  DatabaseConfigurationPage.Add('User Name',False);
  DatabaseConfigurationPage.Add('Password',True);

end;

procedure CurStepChanged(CurStep: TSetupStep);
var
ConfigFile: String;
Parameters: String;
OutputResult: Integer;
AppCmdPath: String;
WebConfigFile: String;
GatewayConfigFile: String;
begin
  if CurStep = ssPostInstall then
  begin
    AppCmdPath := ExpandConstant('{sys}\inetsrv\appcmd.exe');

    if GetSQLServerName() <> ''  then
    begin
    // Run SQL script to generate database
    Parameters := '-S "' + GetSQLServerName() + '" -U "' + GetSQLUserName() + '" -P "' + GetSQLPassword() + '" -i "' + ExpandConstant('{app}\Scripts\DBScript.sql') + '"'; 
    Exec('sqlcmd.exe', Parameters, '', SW_HIDE, ewWaitUntilTerminated, OutputResult);
    end;

    // Install TNMT Service
    Parameters := 'create {#TNMTServiceName} start= auto binPath= "' + ExpandConstant('{app}\Services\BackgroundService_TNMT.exe') + '"'; 
    Exec('sc.exe', Parameters, '', SW_HIDE, ewWaitUntilTerminated, OutputResult);
    Parameters := 'description {#TNMTServiceName} "Service day du lieu len TNMT"'; 
    Exec('sc.exe', Parameters, '', SW_HIDE, ewWaitUntilTerminated, OutputResult);


    // Install Bitexco Service
    //Parameters := 'create {#BitexcoServiceName} start= auto binPath= "' + ExpandConstant('{app}\Services\BackgroundService_Bitexco.exe') + '"'; 
    //Exec('sc.exe', Parameters, '', SW_HIDE, ewWaitUntilTerminated, OutputResult);
    //Parameters := 'description {#BitexcoServiceName} "Service day du lieu len Bitexco"'; 
    //Exec('sc.exe', Parameters, '', SW_HIDE, ewWaitUntilTerminated, OutputResult);


    // Install Web Service
    //Parameters := 'create {#WebServiceName} start= auto binPath= "' + ExpandConstant('{app}\Services\BackgroundService_Web.exe') + '"'; 
    //Exec('sc.exe', Parameters, '', SW_HIDE, ewWaitUntilTerminated, OutputResult);
    //Parameters := 'description {#WebServiceName} "Service day du lieu len Web Tay Nguyen"'; 
    //Exec('sc.exe', Parameters, '', SW_HIDE, ewWaitUntilTerminated, OutputResult);
  
    // Replace connection string in config file of app
    ConfigFile := ExpandConstant('{app}\ModbusSesan.exe.config'); 
    FileReplaceString(ConfigFile, '[SQLDataSource]', GetSQLServerName());
    FileReplaceString(ConfigFile, '[SQLUsername]', GetSQLUserName());
    FileReplaceString(ConfigFile, '[SQLPassword]', GetSQLPassword());
   
   // Replace connection string in config file of TNMT
    ConfigFile := ExpandConstant('{app}\Services\BackgroundService_TNMT.exe.config'); 
    FileReplaceString(ConfigFile, '[SQLDataSource]', GetSQLServerName());
    FileReplaceString(ConfigFile, '[SQLUsername]', GetSQLUserName());
    FileReplaceString(ConfigFile, '[SQLPassword]', GetSQLPassword());

    // Replace connection string in config file of Bitexco
    //ConfigFile := ExpandConstant('{app}\Services\BackgroundService_Bitexco.exe.config'); 
    //FileReplaceString(ConfigFile, '[SQLDataSource]', GetSQLServerName());
    //FileReplaceString(ConfigFile, '[SQLUsername]', GetSQLUserName());
    //FileReplaceString(ConfigFile, '[SQLPassword]', GetSQLPassword());

    // Replace connection string in config file of Web
    //ConfigFile := ExpandConstant('{app}\Services\BackgroundService_Web.exe.config'); 
    //FileReplaceString(ConfigFile, '[SQLDataSource]', GetSQLServerName());
    //FileReplaceString(ConfigFile, '[SQLUsername]', GetSQLUserName());
    //FileReplaceString(ConfigFile, '[SQLPassword]', GetSQLPassword());
  end;
end;