@{
    ViewBag.Title = "Trang Chủ";
    ViewBag.ActiveMenu = "Dashboard";
    ViewBag.PlantName = "ĐAKSRÔNG";
    ViewBag.SystemName = "HỆ THỐNG QUAN TRẮC THỦY VĂN";
}
@model IndusG.Models.MeasurementModel

<!-- ChartJS -->
<link href="~/plugins/multiselect/multiselect.css" rel="stylesheet" />


<div class="row">
    <div class="col-lg-3 col-12">
        <div class="row" id="MeasurementData">
            <div class="col-lg-6 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        @Html.LabelFor(m => m.UpstreamWaterLevel_m, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.UpstreamWaterLevel_m) <span class="measurementUnit">m</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/mucnuoc.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        @Html.LabelFor(m => m.DownstreamWaterLevel_m, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.DownstreamWaterLevel_m) <span class="measurementUnit">m</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/mucnuoc.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        @Html.LabelFor(m => m.QcmH1H2H3, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.QcmH1H2H3) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        @Html.LabelFor(m => m.Reserve_Water, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.Reserve_Water)  <span class="measurementUnit">triệu m<sup>3</sup></span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        @Html.LabelFor(m => m.Qoverflow, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.Qoverflow) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        @Html.LabelFor(m => m.Qminflow, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.Qminflow) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>

            <div class="col-lg-6 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        @Html.LabelFor(m => m.Qve_Ho, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.Qve_Ho) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        @Html.LabelFor(m => m.Qve_HoDB, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.Qve_HoDB) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        @Html.LabelFor(m => m.H1_MW, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.H1_MW) <span class="measurementUnit">MW</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/congsuat.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-danger">
                    <div class="inner">
                        @Html.LabelFor(m => m.QcmH1, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.QcmH1) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        @Html.LabelFor(m => m.H2_MW, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.H2_MW) <span class="measurementUnit">MW</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/congsuat.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-danger">
                    <div class="inner">
                        @Html.LabelFor(m => m.QcmH2, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.QcmH2) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        @Html.LabelFor(m => m.H3_MW, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.H3_MW) <span class="measurementUnit">MW</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/congsuat.png">
                        </i>
                    </div>

                </div>
            </div>
            <div class="col-lg-6 col-6">
                <div class="small-box bg-danger">
                    <div class="inner">
                        @Html.LabelFor(m => m.QcmH3, new { @class = "measurementName" })
                        <div class="measurementValue">
                            @Html.DisplayFor(m => m.QcmH3) <span class="measurementUnit">m<sup>3</sup>/s</span>
                        </div>
                    </div>
                    <div class="icon">
                        <i class="ion">
                            <img class="measurementImage" src="~/Content/icons/luuluong.png">
                        </i>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-9 col-12">
        <!-- AREA CHART -->
        <div class="card card-primary">
            <div class="card-header d-flex justify-content-between align-items-center">
                
                    <div class="card-title" id="chartTitle">Biểu đồ dữ liệu theo thời gian</div>

                    <div class="input-group date pull-right" id="datepicker" style="max-width: 350px;margin-left:400px;">
                        <input type="text" id="selectedDate" class="form-control" placeholder="Chọn Ngày Xem" />
                    </div>
                </div>
                <div class="card-body">


                    <div class="row" style="margin-left: 20px;">
                        <div class="col-6"></div>
                        <div class="col-6">
                            <select id='legendSelect' multiple="multiple">
                                <option value='0' selected disabled>Lưu lượng về hồ</option>
                                <option value='1'>Lưu lượng về hạ du</option>
                                <option value='2'>Công suất H1</option>
                                <option value='3'>Công suất H2</option>
                                <option value='4'>Công suất H3</option>
                                <option value='5'>Mực nước thượng lưu</option>
                                <option value='6'>Mực nước hạ lưu</option>
                                <option value='7'>Lưu lượng qua xả tràn</option>bo
                                <option value='8'>Lưu lượng xả tối thiểu</option>
                                <option value='9'>Lưu lượng xả qua nhà máy</option>
                            </select>
                        </div>
                    </div>
                    <div class="chart">
                        <canvas id="areaChart" style="min-height: 420px; height: 420px; max-height: 950px; max-width: 100%;"></canvas>
                    </div>
                </div>
                <!-- /.card-body -->
            </div>
        <!-- /.card -->
    </div>

</div>

<style>
    /* ✅ Make measurement icons smaller */
    .measurementImage {
        width: 20px; /* adjust as needed */
        height: auto; /* keep aspect ratio */
    }

    /* (Optional) center icon better in the box */
    .small-box .icon {
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>


@section scripts {
    <!-- jQuery (luôn load trước bootstrap-datepicker) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Bootstrap Datepicker -->
    <script src="~/plugins/datatable/jquery.dataTables.min.js"></script>
    <script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

    <!-- Multiselect -->
    <script src="~/plugins/multiselect/multiselect.min.js"></script>
    <script>
        Date.prototype.addMinutes = function (h) {
            this.setMinutes(this.getMinutes() + h);
            return this;
        }
        var selectedHour = 24;
       var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); // tháng tính từ 0
        var yyyy = today.getFullYear();

        var selectedDate = dd + '/' + mm + '/' + yyyy; // dd/MM/yyyy

        // Gán vào input (chỉ hiển thị)
        $("#selectedDate").val(selectedDate);


        var measurementCollection = [];

        var chartMasterData = [
            {
                label: 'Lưu lượng về hồ',
                backgroundColor: 'rgba(225,193,7,0.3)',
                borderColor: 'rgba(225,193,7,0.8)',
                //pointRadius: true,

                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Lưu lượng về hạ du',
                backgroundColor: 'rgba(191,63,63,0.3)',
                borderColor: 'rgba(191,63,63,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Công suất H1',
                backgroundColor: 'rgba(63,127,191,0.3)',
                borderColor: 'rgba(63,127,191,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Công suất H2',
                backgroundColor: 'rgba(119,35,203,0.3)',
                borderColor: 'rgba(119,35,203,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Công suất H3',
                backgroundColor: 'rgba(119,203,35,0.3)',
                borderColor: 'rgba(119,203,35,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Mực nước thượng lưu',
                backgroundColor: 'rgba(236,39,137,0.3)',
                borderColor: 'rgba(236,39,137,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Mực nước hạ lưu',
                backgroundColor: 'rgba(39,236,236,0.3)',
                borderColor: 'rgba(39,236,236,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Lưu lượng qua xả tràn',
                backgroundColor: 'rgba(255,165,30,0.3)',
                borderColor: 'rgba(255,165,30,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Lưu lượng xả tối thiểu',
                backgroundColor: 'rgba(3,17,5,0.3)',
                borderColor: 'rgba(3,17,5,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            },
            {
                label: 'Lưu lượng xả qua nhà máy',
                backgroundColor: 'rgba(3,123,19,0.3)',
                borderColor: 'rgba(3,123,19,0.8)',
                //pointRadius: true,
                pointColor: '#3b8bba',
                pointStrokeColor: 'rgba(60,141,188,1)',
                //pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(60,141,188,1)'
            }
        ]

        function GetChartData(callBack) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetMeasurementChartData", "Dashboard")",
                data: {
                    'selectedHour': selectedHour,
                    'selectedDate': selectedDate   // gửi thêm ngày
                },
                success: function (response) {
                    if (callBack != null) {
                        callBack(response);
                    }
                },
                error: function () { }
            });
        }

        var areaChart;



        $(function () {

            GetChartData(InitChart);
            function UpdateMeasurementData() {
                $("#MeasurementData").load(window.location.href + " #MeasurementData");
            };

            setInterval(UpdateMeasurementData, 1000);

            setInterval(function () {
                GetChartData(UpdateChartData);
            }, 30000);

            $('#legendSelect').multiselect();
            $('#legendSelect').change(function () {
                UpdateLegend();
            });


            $("#selectedDate").datepicker({
                dateFormat: 'dd/mm/yy'
            });

           $('#selectedDate').on('change', function () {
               let val = $(this).val();
               selectedDate = val && val.trim() !== "" ? val : null;
                // Call API lấy dữ liệu
                GetChartData(UpdateChartData);
            });



            function InitChart(masterData) {
                var areaChartCanvas = $('#areaChart').get(0).getContext('2d');

                var config = {
                    type: 'line',
                    data: {
                        datasets: [
                            chartMasterData[0]
                        ]
                    },
                    options: {
                        maintainAspectRatio: false,
                        responsive: true,
                        elements: {
                            point: {
                                radius: 0
                            }
                        },
                        interaction: {
                            mode: 'index',
                            intersect: false
                        },
                        plugins: {
                            tooltip: {
                                enabled: true,
                                callbacks: {
                                    label: function (context) {
                                        let label = context.dataset.label || '';
                                        let value = context.formattedValue;
                                        let time = context.label; // X axis value
                                        return label + ': ' + value;
                                    }
                                }
                            },
                            legend: {
                                display: true
                            }
                        },
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    unit: 'hour',
                                    stepSize: 2,
                                    displayFormats: {
                                        hour: 'HH:mm'
                                    },
                                    tooltipFormat: 'dd/MM/yyyy HH:mm'
                                },
                                ticks: {
                                    autoSkip: true,
                                    maxRotation: 0,
                                    minRotation: 0
                                },
                                grid: {
                                    display: false // tắt hoàn toàn ô li dọc
                                },
                                title: {
                                    display: true,
                                    text: 'Thời Gian Đo'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                grid: {
                                    display: false // tắt ô li ngang
                                },
                                title: {
                                    display: true,
                                    text: 'Giá Trị Đo'
                                }
                            }
                        }
                    }
                };

                areaChart = new Chart(areaChartCanvas, config);
                UpdateChartData(masterData);
            }

            function UpdateChartData(masterData) {
                // clear data
                $.each(chartMasterData, function (key, value) {
                    value.data = [];
                });

                $.each(masterData, function (key, value) {
                    chartMasterData[0].data.push({ x: value.Date, y: value.Qve_Ho });
                    chartMasterData[1].data.push({ x: value.Date, y: value.Qve_HaDu });
                    chartMasterData[2].data.push({ x: value.Date, y: value.H1_MW });
                    chartMasterData[3].data.push({ x: value.Date, y: value.H2_MW });
                    chartMasterData[4].data.push({ x: value.Date, y: value.H3_MW });
                    chartMasterData[5].data.push({ x: value.Date, y: value.UpstreamWaterLevel_m });
                    chartMasterData[6].data.push({ x: value.Date, y: value.DownstreamWaterLevel_m });
                    chartMasterData[7].data.push({ x: value.Date, y: value.Qoverflow });
                    chartMasterData[8].data.push({ x: value.Date, y: value.Qminflow });
                    chartMasterData[9].data.push({ x: value.Date, y: value.QcmH1H2H3 });
                });

                areaChart.update();
            }

            function UpdateLegend() {
                areaChart.data.datasets = [];
                $("#legendSelect option:selected").each(function () {
                    var legendIndex = $(this).val();
                    areaChart.data.datasets.push(chartMasterData[legendIndex]);
                });
                areaChart.update();
            }
        })
    </script>

}


